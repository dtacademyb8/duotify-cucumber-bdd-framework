For Cucumber framework we will need the following 3 dependencies:
cucumber-java, cucumber-core, cucumber-junit

// n dbvghsdy

In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions glue option in Runner class
      // Cucumber scenario step is matched to step definition method using the text of the scenario step
      // either with Regular Expressions or Cucumber Expressions
  - tags are the main way to control what scenario or feature files
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps
  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
             The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class


  Cucumber parametrized step enables the step to be used multiple times with different sets of data and prevents multiple step snippet generation

  Cucumber automatically converts matching types(String,int, double) from scenario step into corresponding parameter({string},{int},{double}) and adds it to a snippet method as a parameter:
  Ex:
      Scenario Step:           Given I have 5 pounds of cucumbers of type "Cuke" that cost me 5.99 dollars

      Generated snippet:        @Given("I have {int} pounds of cucumbers of type {string} that cost me {double} dollars")
                                public void i_have_pounds_of_cucumbers_of_type_that_cost_me_dollars(Integer int1, String string, Double double1) {

                                }






     If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """

           What are some common Cucumber exceptions?

           UndefinedStepException -  when a scenario step does not have matching step definition method

           PendingException - default exception that added to each step definition snippet

           AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions

           DuplicateStepDefinitionException - happens when there are more than one step definitions with the exactly matching text

           CucumberException: Could not convert arguments for step [I pass this information] defined at - happens when setep definition parameter
                              type does not match the datatable





           Cucumber DataTable - a cucumber structure that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                                into the step definition method

             Example:           Given I am on homepage
                                When I pass this information
                                | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |

              The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
              Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
               Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long

           When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
           unmodifiable versions of these data structures. If you need to modify, you need to convert into a modifiable type

           Running tests thru command line in Cucumber Framework:



           -Add Maven Surefire plugin (latest version)
           - Configure it by including the name of the class to run:

                              <configuration>
                                   <includes>
                                       <include>**/*CucumberRunner.java</include>
                                   </includes>
                               </configuration>

           - run with mvn test

           Running scenarios with specific tags thru cmd:

           mvn verify -Dcucumber.filter.tags="@temp"
           mvn verify -Dcucumber.filter.tags="@test and @temp"
           mvn verify -Dcucumber.filter.tags="@test or @temp"
           mvn verify -Dcucumber.filter.tags="@test and not @temp"

           When you run your test through CMD using Maven, tags passed thru CMD will override the tags from CucumberRunner class.

           In Cucumber framework we can implement data-driven testing natively with Scenario Outline with Examples table.

           The difference between DataTable and Scenario Outline Examples table -> datatable belongs to one step of the scenario, examples table applies to the entire scenario

           If we have a large a dataset it can also be read from an external file such as csv or excel file.
           To read from excel file we use Apache POI library.

           Cucumber comes with built-in Junit 4 by default and it does not have soft assertions. Hence we use AssertJ library to implement soft assertions:
           Ex:

                SoftAssertions softAssertions = new SoftAssertions();
                softAssertions.assertThat( "actual").isEqualTo("expected");
                softAssertions.assertAll();





           @RunWith -> Junit annotation that makes the class a runnable class
           @CucumberOptions -> Cucumber annotation that helps us configure cucumber options to run the tests




      Maven Dependency vs Maven Plugin?

      Maven Dependency -> Libraries that are needed to build our framework (Selenium, Faker, TestNG, Webdrivermanager ). They can do anything, they don't have to do tasks specific to maven
      Maven Plugin -> tools that do maven specific tasks such as clean, run tests, genrerate reports, etc.


      How to run a specific runner class thru CMD when you have multiple runners?
            - Maven surefire plugin determines the name of the runner class to run within its <configuration>  and <includes> tag

                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-surefire-plugin</artifactId>
                            <version>3.0.0-M5</version>
                            <configuration>

                                <testFailureIgnore>true</testFailureIgnore>
                                <includes>
                                    <include>**/*CucumberRunner2.java</include>-->
                                 </includes>
                            </configuration>
                        </plugin>

            - When you have multiple runners you can use a placeholder in surefire plugin
                and pass the name of the runner class thru command line with -D switch -> mvn verify -DrunnerClass=**/*CucumberRunner2.java

                             <plugin>
                                <groupId>org.apache.maven.plugins</groupId>
                                <artifactId>maven-surefire-plugin</artifactId>
                                <version>3.0.0-M5</version>
                                <configuration>

                                    <testFailureIgnore>true</testFailureIgnore>
                                    <includes>

                                        <include>${runnerClass}</include>-->

                                    </includes>
                                </configuration>
                            </plugin>

            - How to re-run only the failed scenarios in Cucumber framework?

              1. Add "rerun:target/failed.txt" to your main runner class which generates a text file with the list of failed scenarios
              2. Add another runner class where you indicate the above text file's path for features:
                         features = "@target/failed.txt"
              3. Run main runner and failed scenarios runner back to back thru Maven Surefire plugin:
                   <plugin>
                                 <groupId>org.apache.maven.plugins</groupId>
                                 <artifactId>maven-surefire-plugin</artifactId>
                                 <version>3.0.0-M5</version>
                                 <configuration>

                                     <testFailureIgnore>true</testFailureIgnore>
                                     <includes>
                                        <include>**/*CucumberRunner.java</include>-->
                                         <include>**/*FailedScenariosRunner.java</include>-->
                                     </includes>
                                 </configuration>
                   </plugin>

               - How to run cross-browser tests in Cucumber framework?

                 - We pass the name of the browser thru command line with -D switch and run the same tests with multiple commands
                 - This can be done through batch/shell script file or through Jenkins commands
                 - batch file example:
                         call mvn verify -Dbrowser=edge
                         call mvn verify -Dbrowser=chrome
                         call mvn verify -Dbrowser=headlessChrome

               We use "mvn verify" in Cucumber framework to run tests so that the pretty report is generated,
                 otherwise you can run the tests as usual with mvn test

              How to run tests in parallel in Cucumber framework?

              We can enable parallel test in Cucumber natively with JUnit. But we need to remember that with this option
              you can run only FEATURES in parallel.
              If there is a need for running SCENARIOS in parallel, you can incorporate TestNG.

              Steps to implement running parallel Features in Cucumber with Junit:
               1.Give the scope of the feature files that you want to run in parallel in your runner class
                    features = "src/test/resources"
                 Optionally create a separate folder for feature files that you want to run in parallel and indicate that path
                       features = "src/test/resources/parallel"

               2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                      <parallel>methods</parallel>
                      <useUnlimitedThreads>true</useUnlimitedThreads>

               3. If you want to limit the threads:
                 <parallel>methods</parallel>
                  <threadCount>6</threadCount>

               4.Run the tests thru command line




               BDD - Behavior-Driven Development (Cucumber + Junit)
               TDD - Test-Driven Development  (TestNG)



               DDT - Data-Driven Testing








               How do you test the DB?

                        Can you explain your overall DB testing strategy?

                        -Data Flow
                        -Data Mapping
                        -Business rules
                        -Unit testing (verify column names, data types, ranges)
                        -Performance/Security



                        My database testing strategy consists of testing multiple aspects of the DB. I start with basic testing of the
                        data flow from UI to DB and vice versa. I also verify the correct data mapping of the information for corresponding
                        fields on the UI and columns in the DB. I also verify various business rules and logic related to the DB.


                        Common database testing scenarios:
                        Verify that data inserted from UI is reflected properly in the appropriate table and vice versa.
                        Check for data integrity. Data should be stored in single or multiple tables based on design.
                        Verify Table Schema, Column names as per Design Document
                        Verify Unicode Support (e.g store Chinese/Japanese Characters)
                        Check if input data is not truncated while saving. Field length shown to the user on a page and in database schema should be the same
                        Check numeric fields with minimum, maximum, and float values
                        Check numeric fields with negative values
                        Check if database fields are designed with the correct data type and data length
                        Check if all table constraints like a Primary key, Foreign key, etc. are implemented correctly
                        Test stored procedures and triggers with sample input data
                        Test if input field leading and trailing spaces are truncated before committing data to the database
                        Check values for columns which are not accepting null values
                        Null values should not be allowed for the Primary key column
                        Checking for duplicates.



                 REST ASSURED


                 Rest Assured is a Java library that helps us write REST API automation code.


